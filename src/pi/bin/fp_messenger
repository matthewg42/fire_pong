#!/usr/bin/env python2

import serial
import logging
import logging.handlers
import sys
import time
import os

import fire_pong.util
from fire_pong.util import load_config
from fire_pong.fp_event import FpEvent


global args
buf = None
last_packet_start = 0
packet_length = None
log = None
puffer_ids = [ ('L', 0x2000, False, False), 
               ('S', 0x1,    False, False), 
               ('S', 0x2,    False, False), 
               ('S', 0x4,    False, False),
               ('S', 0x8,    False, False), 
               ('S', 0x10,   False, False), 
               ('S', 0x20,   False, False), 
               ('S', 0x40,   False, False), 
               ('S', 0x80,   False, False), 
               ('S', 0x100,  False, False), 
               ('S', 0x200,  False, False), 
               ('S', 0x400,  False, False), 
               ('S', 0x800,  False, False), 
               ('L', 0x1000, False, False)
             ]
display_text = ''

# Some constants for parsing the FpEvent packets
PACKET_TIMEOUT = 0.5
FP_SERIAL_BUF_LEN = 27
FP_MINIMUM_PACKET_LEN = 11
FP_SERIAL_LENGTH_OFFSET = 2
FP_SERIAL_ID_OFFSET = 3
FP_SERIAL_TYPE_OFFSET = 7
FP_SERIAL_DATA_OFFSET = 8
FP_MAX_DATA_LEN   = 16

def main():
    global args
    init_log()
    try:
        load_config(args)
    except Exception as e:
        log.exception('%s' % e)
        cleanup_and_exit(1)
    log.info('main() start')

    try:
        send_and_monitor(args.message)
    except Exception as e:
        log.exception('While reading events: %s' % e)
        cleanup_and_exit(5)
        
    log.info('main() end')
    cleanup_and_exit(0)

def init_log():
    """ Initialize the log - use syslog if running as a daemon """
    global args, log
    program = os.path.basename(sys.argv[0])
    handler = logging.StreamHandler()
    fmt = ""
    if args.log_timestamps:
        fmt += '%%(asctime)s %s[%%(process)d] ' % program
    fmt += '%(levelname)s: %(message)s'
    handler.setFormatter(logging.Formatter(fmt))
    log = logging.getLogger('fp_receive')
    log.setLevel(args.logging_level)
    log.addHandler(handler)
    # Set logging in our various modules to use our new logger. These 
    # hoops brought to you by the combination of daemon and logging 
    # modules
    fire_pong.util.log = log

def cleanup_and_exit(level):
    """ Remove PID file and exit the process """
    global log, args
    sys.exit(level)

def send_and_monitor(message):
    from fire_pong.fp_event import FpEvent
    from fire_pong.fp_serial import FpSerial
    from fire_pong.scoreboard import ScoreBoard

    time.sleep(0.1)
    start = time.time()
    ScoreBoard().display(' '.join(message))
    if args.logging_level == logging.DEBUG:
        while True and time.time() < start + 5:
            sys.stdout.write(FpSerial().serial.read())
            sys.stdout.flush()

def reset(msg):
    global buf
    buf = bytearray()
    log.debug('reset: %s' % msg)

if __name__ == '__main__':
    import argparse
    global args
    parser = argparse.ArgumentParser(description='Event Receiver')
    parser.add_argument('-c', '--config-file', dest='config_file',
        default='../etc/firepong.json',
        help='specify the path to the config file')
    parser.add_argument('-D', '--serial-device', dest='serial_device', 
        default=None, 
        help='over-ride config file serial device')
    parser.add_argument('--debug', dest='logging_level', action='store_const',
        const=logging.DEBUG, default=logging.INFO, 
        help='write debugging output in the log')
    parser.add_argument('--serial-debug', dest='serial_debug', action='store_const',
        const=True, default=None, 
        help='write dditional debugging for serial events (when --debug used)')
    parser.add_argument('--log-ts', dest='log_timestamps', 
        action='store_const', const=True, default=False, 
        help='write informational output in the log')
    parser.add_argument('message', type=str, nargs='*', help='what to display')
    args = parser.parse_args()

    main()

